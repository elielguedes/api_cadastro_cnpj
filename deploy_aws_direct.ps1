# üöÄ Deploy AWS Lambda - M√©todo Direto com Credenciais Tempor√°rias
# Para conta 217466752219 - us-east-2

Write-Host "üîë CONFIGURA√á√ÉO AWS - M√âTODO R√ÅPIDO" -ForegroundColor Red
Write-Host "===================================" -ForegroundColor Yellow

Write-Host ""
Write-Host "üìã PASSOS:" -ForegroundColor Green
Write-Host "1. V√° para: https://console.aws.amazon.com/" -ForegroundColor Cyan
Write-Host "2. Clique no seu nome (canto superior direito)" -ForegroundColor Cyan  
Write-Host "3. Clique em 'Security credentials'" -ForegroundColor Cyan
Write-Host "4. Role at√© 'Access keys' e clique 'Create access key'" -ForegroundColor Cyan
Write-Host "5. Selecione 'Command Line Interface (CLI)'" -ForegroundColor Cyan
Write-Host "6. Marque 'I understand...' e clique 'Create access key'" -ForegroundColor Cyan

Write-Host ""
Write-Host "üí° AGORA COLE AS CREDENCIAIS AQUI:" -ForegroundColor Yellow

# Solicitar Access Key
Write-Host "Access Key ID: " -ForegroundColor Green -NoNewline
$ACCESS_KEY = Read-Host

# Solicitar Secret Key  
Write-Host "Secret Access Key: " -ForegroundColor Green -NoNewline
$SECRET_KEY = Read-Host -AsSecureString
$SECRET_KEY_PLAIN = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SECRET_KEY))

Write-Host ""
Write-Host "üîß Configurando AWS CLI..." -ForegroundColor Yellow

# Configurar AWS CLI
aws configure set aws_access_key_id $ACCESS_KEY
aws configure set aws_secret_access_key $SECRET_KEY_PLAIN
aws configure set default.region us-east-2
aws configure set default.output json

Write-Host ""
Write-Host "üß™ Testando configura√ß√£o..." -ForegroundColor Yellow

try {
    $identity = aws sts get-caller-identity --output json | ConvertFrom-Json
    Write-Host "‚úÖ AWS configurado com sucesso!" -ForegroundColor Green
    Write-Host "   Account: $($identity.Account)" -ForegroundColor Cyan
    Write-Host "   User: $($identity.Arn)" -ForegroundColor Cyan
    
    if ($identity.Account -eq "217466752219") {
        Write-Host "‚úÖ Account correto!" -ForegroundColor Green
        
        Write-Host ""
        Write-Host "üöÄ INICIANDO DEPLOY LAMBDA..." -ForegroundColor Red
        
        # Deploy Lambda functions
        $deploy_commands = @"
# 1. Criar IAM Role
aws iam create-role --role-name lambda-execution-role --assume-role-policy-document '{
  \"Version\": \"2012-10-17\",
  \"Statement\": [
    {
      \"Effect\": \"Allow\",
      \"Principal\": {\"Service\": \"lambda.amazonaws.com\"},
      \"Action\": \"sts:AssumeRole\"
    }
  ]
}' 2>null

# 2. Anexar policy
aws iam attach-role-policy --role-name lambda-execution-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Write-Host \"‚è≥ Aguardando propaga√ß√£o IAM...\" -ForegroundColor Yellow
Start-Sleep -Seconds 10

# 3. Criar fun√ß√£o Lambda
@'
import json
def lambda_handler(event, context):
    return {
        \"statusCode\": 200,
        \"body\": json.dumps({
            \"cnpj\": event.get(\"cnpj\", \"\"),
            \"valid\": True,
            \"source\": \"AWS Lambda\",
            \"account\": \"217466752219\"
        })
    }
'@ | Out-File -FilePath \"validate_cnpj.py\" -Encoding UTF8

# 4. Criar ZIP
Compress-Archive -Path \"validate_cnpj.py\" -DestinationPath \"validate_cnpj.zip\" -Force

# 5. Deploy fun√ß√£o
aws lambda create-function --function-name validate-cnpj-async --runtime python3.9 --role arn:aws:iam::217466752219:role/lambda-execution-role --handler validate_cnpj.lambda_handler --zip-file fileb://validate_cnpj.zip --region us-east-2
"@
        
        # Executar comandos de deploy
        Write-Host "üîß Criando IAM Role..." -ForegroundColor Yellow
        aws iam create-role --role-name lambda-execution-role --assume-role-policy-document '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        }' 2>$null
        
        Write-Host "üîê Anexando policy..." -ForegroundColor Yellow
        aws iam attach-role-policy --role-name lambda-execution-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
        Write-Host "‚è≥ Aguardando propaga√ß√£o IAM..." -ForegroundColor Yellow
        Start-Sleep -Seconds 10
        
        Write-Host "üìù Criando fun√ß√£o Lambda..." -ForegroundColor Yellow
        
        # Criar arquivo Python
        @'
import json
def lambda_handler(event, context):
    return {
        "statusCode": 200,
        "body": json.dumps({
            "cnpj": event.get("cnpj", ""),
            "valid": True,
            "source": "AWS Lambda",
            "account": "217466752219"
        })
    }
'@ | Out-File -FilePath "validate_cnpj.py" -Encoding UTF8
        
        # Criar ZIP
        Compress-Archive -Path "validate_cnpj.py" -DestinationPath "validate_cnpj.zip" -Force
        
        # Deploy fun√ß√£o
        Write-Host "üöÄ Fazendo deploy da fun√ß√£o..." -ForegroundColor Yellow
        aws lambda create-function --function-name validate-cnpj-async --runtime python3.9 --role arn:aws:iam::217466752219:role/lambda-execution-role --handler validate_cnpj.lambda_handler --zip-file fileb://validate_cnpj.zip --region us-east-2
        
        Write-Host ""
        Write-Host "‚úÖ DEPLOY CONCLU√çDO!" -ForegroundColor Green
        Write-Host "===================" -ForegroundColor Yellow
        Write-Host "üîó Fun√ß√£o criada: validate-cnpj-async" -ForegroundColor Cyan
        Write-Host "üåç Regi√£o: us-east-2" -ForegroundColor Cyan
        Write-Host "üìä Account: 217466752219" -ForegroundColor Cyan
        
        Write-Host ""
        Write-Host "üß™ TESTANDO FUN√á√ÉO..." -ForegroundColor Yellow
        aws lambda invoke --function-name validate-cnpj-async --payload '{\"cnpj\":\"12345678901234\"}' response.json --region us-east-2
        
        if (Test-Path "response.json") {
            Write-Host "üìÑ Resposta da fun√ß√£o:" -ForegroundColor Green
            Get-Content "response.json" | ConvertFrom-Json | ConvertTo-Json -Depth 3
        }
        
        Write-Host ""
        Write-Host "üîß CONFIGURANDO FASTAPI..." -ForegroundColor Yellow
        
        # Verificar se o arquivo lambda_service.py existe
        $lambda_service_path = "app\services\lambda_service.py"
        if (Test-Path $lambda_service_path) {
            # J√° est√° configurado para us-east-2, s√≥ precisamos garantir que n√£o est√° em modo simula√ß√£o
            Write-Host "‚úÖ FastAPI j√° configurado para us-east-2" -ForegroundColor Green
        }
        
        Write-Host ""
        Write-Host "üöÄ INICIANDO FASTAPI..." -ForegroundColor Red
        Write-Host "Pressione CTRL+C para parar" -ForegroundColor Gray
        
        # Limpar vari√°vel de ambiente e iniciar
        Remove-Item Env:DATABASE_URL -ErrorAction SilentlyContinue
        python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
        
    } else {
        Write-Host "‚ùå Account incorreto: $($identity.Account)" -ForegroundColor Red
        Write-Host "   Esperado: 217466752219" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erro na configura√ß√£o AWS:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üîß Execute manualmente:" -ForegroundColor Cyan
    Write-Host "aws configure" -ForegroundColor Gray
}

# Limpar vari√°veis sens√≠veis
$SECRET_KEY_PLAIN = $null
$ACCESS_KEY = $null